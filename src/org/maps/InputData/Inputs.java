package org.maps.InputData;

import java.util.HashSet;
import java.util.Set;
import java.util.Vector;

public class Inputs {
    public static final int[][] processing_cost = {
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0,13850, 16620, 11080, 15235, 12465, 6925}, // 1
            {0,13110, 15732, 10488, 14421, 11799, 6555}, // 2
            {0,13420, 16104, 10736, 14762, 12078, 6710}, // 3
            {0,13300, 15960, 10640, 14630, 11970, 6650}, // 4
            {0,13160, 15792, 10528, 14476, 11844, 6580}, // 5
            {0,13570, 16284, 10856, 14927, 12213, 6785}, // 6
            {0,13250, 15900, 10600, 14575, 11925, 6625}, // 7
            {0,13650, 16380, 10920, 15015, 12285, 6825}, // 8
            {0,13630, 16356, 10904, 14993, 12267, 6815}, // 9
            {0,13700, 16440, 10960, 15070, 12330, 6850}, // 10
            {0,13550, 16260, 10840, 14905, 12195, 6775}, // 11
            {0,13810, 16572, 11048, 15191, 12429, 6905}, // 12
            {0,13620, 16344, 10896, 14982, 12258, 6810}, // 13
            {0,13360, 16032, 10688, 14696, 12024, 6680}, // 14
            {0,13170, 15804, 10536, 14487, 11853, 6585}, // 15
            {0,13580, 16296, 10864, 14938, 12222, 6790}, // 16
            {0,10570, 12684, 8456, 11627, 9513, 5285}, // 17
            {0,10600, 12720, 8480, 11660, 9540, 5300}, // 18
            {0,10580, 12696, 8464, 11638, 9522, 5290}, // 19
            {0,10640, 12768, 8512, 11704, 9576, 5320}, // 20
            {0,10450, 12540, 8360, 11495, 9405, 5225}, // 21
            {0,10640, 12768, 8512, 11704, 9576, 5320}, // 22
            {0,10580, 12696, 8464, 11638, 9522, 5290}, // 23
            {0,10740, 12888, 8592, 11814, 9666, 5370}, // 24
            {0,10610, 12732, 8488, 11671, 9549, 5305}, // 25
            {0,10580, 12696, 8464, 11638, 9522, 5290}, // 26
            {0,10670, 12804, 8536, 11737, 9603, 5335}, // 27
            {0,10670, 12804, 8536, 11737, 9603, 5335}, // 28
            {0,10570, 12684, 8456, 11627, 9513, 5285}, // 29
            {0,10740, 12888, 8592, 11814, 9666, 5370}, // 30
            {0,10910, 13092, 8728, 12001, 9819, 5455}, // 31
            {0,10550, 12660, 8440, 11605, 9495, 5275}, // 32
            {0,10490, 12588, 8392, 11539, 9441, 5245}, // 33
            {0,10610, 12732, 8488, 11671, 9549, 5305}, // 34
            {0,10530, 12636, 8424, 11583, 9477, 5265}, // 35
            {0,10530, 12636, 8424, 11583, 9477, 5265}, // 36
            {0,10670, 12804, 8536, 11737, 9603, 5335}, // 37
            {0,10540, 12648, 8432, 11594, 9486, 5270}, // 38
            {0,10410, 12492, 8328, 11451, 9369, 5205}, // 39
            {0,10580, 12696, 8464, 11638, 9522, 5290}, // 40
            {0,10510, 12612, 8408, 11561, 9459, 5255}, // 41
            {0,10770, 12924, 8616, 11847, 9693, 5385}, // 42
            {0,10460, 12552, 8368, 11506, 9414, 5230}, // 43
            {0,10400, 12480, 8320, 11440, 9360, 5200}, // 44
            {0,10540, 12648, 8432, 11594, 9486, 5270}, // 45
            {0,10560, 12672, 8448, 11616, 9504, 5280}, // 46
            {0,10620, 12744, 8496, 11682, 9558, 5310}, // 47
            {0,10590, 12708, 8472, 11649, 9531, 5295}, // 48
            {0,10480, 12576, 8384, 11528, 9432, 5240}, // 49
            {0,10690, 12828, 8552, 11759, 9621, 5345}, // 50
            {0,10650, 12780, 8520, 11715, 9585, 5325}, // 51
            {0,10550, 12660, 8440, 11605, 9495, 5275}, // 52
            {0,10660, 12792, 8528, 11726, 9594, 5330}, // 53
            {0,10550, 12660, 8440, 11605, 9495, 5275}, // 54
            {0,10560, 12672, 8448, 11616, 9504, 5280}, // 55
            {0,10470, 12564, 8376, 11517, 9423, 5235}, // 56
            {0,10480, 12576, 8384, 11528, 9432, 5240}, // 57
            {0,10510, 12612, 8408, 11561, 9459, 5255}, // 58
            {0,10590, 12708, 8472, 11649, 9531, 5295}, // 59
            {0,10720, 12864, 8576, 11792, 9648, 5360}, // 60
            {0,10490, 12588, 8392, 11539, 9441, 5245}, // 61
            {0,10640, 12768, 8512, 11704, 9576, 5320}, // 62
            {0,10460, 12552, 8368, 11506, 9414, 5230}, // 63
            {0,10350, 12420, 8280, 11385, 9315, 5175}, // 64
            {0,10640, 12768, 8512, 11704, 9576, 5320}, // 65
            {0,10590, 12708, 8472, 11649, 9531, 5295}, // 66
            {0,10720, 12864, 8576, 11792, 9648, 5360}, // 67
            {0,10570, 12684, 8456, 11627, 9513, 5285}, // 68
            {0,10610, 12732, 8488, 11671, 9549, 5305}, // 69
            {0,10660, 12792, 8528, 11726, 9594, 5330}, // 70
            {0,10770, 12924, 8616, 11847, 9693, 5385}, // 71
            {0,10430, 12516, 8344, 11473, 9387, 5215}, // 72
            {0,10790, 12948, 8632, 11869, 9711, 5395}, // 73
            {0,10650, 12780, 8520, 11715, 9585, 5325}, // 74
            {0,10490, 12588, 8392, 11539, 9441, 5245}, // 75
            {0,10610, 12732, 8488, 11671, 9549, 5305}, // 76
            {0,10470, 12564, 8376, 11517, 9423, 5235}, // 77
            {0,10650, 12780, 8520, 11715, 9585, 5325}, // 78
            {0,4960, 5952, 3968, 5456, 4464, 2480}, // 79
            {0,5340, 6408, 4272, 5874, 4806, 2670}, // 80
            {0,10880, 13056, 8704, 11968, 9792, 5440}, // 81
            {0,10960, 13152, 8768, 12056, 9864, 5480}, // 82
            {0,10610, 12732, 8488, 11671, 9549, 5305}, // 83
            {0,10730, 12876, 8584, 11803, 9657, 5365}, // 84
            {0,10660, 12792, 8528, 11726, 9594, 5330}, // 85
            {0,10490, 12588, 8392, 11539, 9441, 5245}, // 86
            {0,10900, 13080, 8720, 11990, 9810, 5450}, // 87
            {0,10750, 12900, 8600, 11825, 9675, 5375}, // 88
            {0,10720, 12864, 8576, 11792, 9648, 5360}, // 89
            {0,10860, 13032, 8688, 11946, 9774, 5430}, // 90
            {0,10740, 12888, 8592, 11814, 9666, 5370}, // 91
            {0,10690, 12828, 8552, 11759, 9621, 5345}, // 92
            {0,10740, 12888, 8592, 11814, 9666, 5370}, // 93
            {0,10690, 12828, 8552, 11759, 9621, 5345}, // 94
            {0,10730, 12876, 8584, 11803, 9657, 5365}, // 95
            {0,10780, 12936, 8624, 11858, 9702, 5390}, // 96
            {0,7630, 9156, 6104, 8393, 6867, 3815}, // 97
            {0,9600, 11520, 7680, 10560, 8640, 4800}, // 98
            {0,6910, 8292, 5528, 7601, 6219, 3455}, // 99
            {0,830, 996, 664, 913, 747, 415}, // 100
    };
    public static final CCP[][] dag = new CCP[][]{
            {new CCP(0, 0)}, // 0
            {new CCP(19,666),new CCP(81,666),new CCP(17,666),new CCP(46,666),new CCP(21,666),new CCP(63,666),new CCP(20,666),new CCP(18,666),}, //1
            {new CCP(40,670),new CCP(23,670),new CCP(56,670),new CCP(28,670),new CCP(24,670),new CCP(39,670),new CCP(17,670),new CCP(26,670),new CCP(29,670),new CCP(82,670),new CCP(25,670),new CCP(21,670),new CCP(69,670),new CCP(27,670),new CCP(22,670),}, //2
            {new CCP(30,667),new CCP(74,667),new CCP(31,667),new CCP(36,667),new CCP(83,667),new CCP(47,667),}, //3
            {new CCP(34,666),new CCP(30,666),new CCP(33,666),new CCP(48,666),new CCP(35,666),new CCP(32,666),new CCP(84,666),new CCP(57,666),new CCP(22,666),new CCP(75,666),}, //4
            {new CCP(41,664),new CCP(50,664),new CCP(37,664),new CCP(36,664),new CCP(85,664),new CCP(66,664),new CCP(38,664),}, //5
            {new CCP(86,666),new CCP(70,666),new CCP(39,666),new CCP(58,666),}, //6
            {new CCP(40,664),new CCP(42,664),new CCP(23,664),new CCP(41,664),new CCP(43,664),new CCP(31,664),new CCP(45,664),new CCP(87,664),new CCP(44,664),}, //7
            {new CCP(49,665),new CCP(48,665),new CCP(32,665),new CCP(24,665),new CCP(71,665),new CCP(46,665),new CCP(51,665),new CCP(88,665),new CCP(47,665),new CCP(59,665),}, //8
            {new CCP(52,666),new CCP(42,666),new CCP(50,666),new CCP(89,666),new CCP(54,666),new CCP(76,666),new CCP(25,666),new CCP(51,666),new CCP(64,666),new CCP(53,666),}, //9
            {new CCP(90,666),new CCP(43,666),new CCP(55,666),new CCP(26,666),new CCP(18,666),}, //10
            {new CCP(60,666),new CCP(56,666),new CCP(62,666),new CCP(61,666),new CCP(57,666),new CCP(58,666),new CCP(44,666),new CCP(53,666),new CCP(91,666),new CCP(59,666),}, //11
            {new CCP(92,667),new CCP(19,667),new CCP(65,667),new CCP(49,667),new CCP(54,667),new CCP(63,667),new CCP(64,667),new CCP(77,667),}, //12
            {new CCP(33,667),new CCP(37,667),new CCP(68,667),new CCP(72,667),new CCP(45,667),new CCP(66,667),new CCP(93,667),new CCP(27,667),new CCP(67,667),}, //13
            {new CCP(34,666),new CCP(94,666),new CCP(73,666),new CCP(28,666),new CCP(71,666),new CCP(72,666),new CCP(70,666),new CCP(61,666),new CCP(69,666),new CCP(38,666),new CCP(20,666),}, //14
            {new CCP(65,666),new CCP(95,666),new CCP(62,666),new CCP(78,666),}, //15
            {new CCP(96,666),new CCP(35,666),new CCP(74,666),new CCP(68,666),new CCP(76,666),new CCP(78,666),new CCP(29,666),new CCP(75,666),new CCP(77,666),}, //16
            {new CCP(79,15),}, //17
            {new CCP(79,15),}, //18
            {new CCP(79,15),}, //19
            {new CCP(79,15),}, //20
            {new CCP(79,15),}, //21
            {new CCP(79,15),}, //22
            {new CCP(79,15),}, //23
            {new CCP(79,15),}, //24
            {new CCP(79,15),}, //25
            {new CCP(79,15),}, //26
            {new CCP(79,15),}, //27
            {new CCP(79,15),}, //28
            {new CCP(79,15),}, //29
            {new CCP(79,15),}, //30
            {new CCP(79,15),}, //31
            {new CCP(79,15),}, //32
            {new CCP(79,15),}, //33
            {new CCP(79,15),}, //34
            {new CCP(79,15),}, //35
            {new CCP(79,15),}, //36
            {new CCP(79,15),}, //37
            {new CCP(79,15),}, //38
            {new CCP(79,15),}, //39
            {new CCP(79,15),}, //40
            {new CCP(79,15),}, //41
            {new CCP(79,15),}, //42
            {new CCP(79,15),}, //43
            {new CCP(79,15),}, //44
            {new CCP(79,15),}, //45
            {new CCP(79,15),}, //46
            {new CCP(79,15),}, //47
            {new CCP(79,15),}, //48
            {new CCP(79,15),}, //49
            {new CCP(79,15),}, //50
            {new CCP(79,15),}, //51
            {new CCP(79,15),}, //52
            {new CCP(79,15),}, //53
            {new CCP(79,15),}, //54
            {new CCP(79,15),}, //55
            {new CCP(79,15),}, //56
            {new CCP(79,15),}, //57
            {new CCP(79,15),}, //58
            {new CCP(79,15),}, //59
            {new CCP(79,15),}, //60
            {new CCP(79,15),}, //61
            {new CCP(79,15),}, //62
            {new CCP(79,15),}, //63
            {new CCP(79,15),}, //64
            {new CCP(79,15),}, //65
            {new CCP(79,15),}, //66
            {new CCP(79,15),}, //67
            {new CCP(79,15),}, //68
            {new CCP(79,15),}, //69
            {new CCP(79,15),}, //70
            {new CCP(79,15),}, //71
            {new CCP(79,15),}, //72
            {new CCP(79,15),}, //73
            {new CCP(79,15),}, //74
            {new CCP(79,15),}, //75
            {new CCP(79,15),}, //76
            {new CCP(79,15),}, //77
            {new CCP(79,15),}, //78
            {new CCP(80,2),}, //79
            {new CCP(90,1),new CCP(92,1),new CCP(96,1),new CCP(95,1),new CCP(94,1),new CCP(81,1),new CCP(86,1),new CCP(89,1),new CCP(84,1),new CCP(85,1),new CCP(87,1),new CCP(82,1),new CCP(93,1),new CCP(83,1),new CCP(88,1),new CCP(91,1),}, //80
            {new CCP(97,670),}, //81
            {new CCP(97,664),}, //82
            {new CCP(97,664),}, //83
            {new CCP(97,668),}, //84
            {new CCP(97,669),}, //85
            {new CCP(97,667),}, //86
            {new CCP(97,665),}, //87
            {new CCP(97,667),}, //88
            {new CCP(97,668),}, //89
            {new CCP(97,667),}, //90
            {new CCP(97,665),}, //91
            {new CCP(97,668),}, //92
            {new CCP(97,667),}, //93
            {new CCP(97,669),}, //94
            {new CCP(97,669),}, //95
            {new CCP(97,667),}, //96
            {new CCP(98,1),}, //97
            {new CCP(99,11110),}, //98
            {new CCP(100,223),}, //99
            {}, //100
    };
    public static Vector<Set<Integer>> dependency = new Vector<>(Constants.MAX_TASKS + 1);

    public static void main(String[] args) {
        System.out.println("Processing costs");
        for (int[] pc_cost : processing_cost) {
            System.out.println();
            for (int cost_on_processor : pc_cost) {
                System.out.print(cost_on_processor + ", ");
            }
        }

        System.out.println("Comm cost pair");
        for (CCP[] pairs : dag) {
            System.out.println();
            for (CCP p : pairs) {
                System.out.print(p.to_node + " : " + p.to_node + ", ");
            }
        }
    }

    public static void generate_dependency_table() {
        //
        for (int i = 0; i <= Constants.MAX_TASKS; i++) {
            dependency.add(i, new HashSet<>());
        }
        for (int i = 1; i <= Constants.MAX_TASKS; i++) {
            CCP[] ccp = dag[i];
            for (CCP p : ccp) {
                Set<Integer> s = dependency.get(p.to_node);
                s.add(i);
                dependency.set(p.to_node, s);
            }
        }
    }
}
